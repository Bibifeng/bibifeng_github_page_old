<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用Apache对多个项目进行站点配置]]></title>
    <url>%2F2018%2F07%2F04%2F%E4%BD%BF%E7%94%A8Apache%E5%AF%B9%E5%A4%9A%E4%B8%AA%E9%A1%B9%E7%9B%AE%E8%BF%9B%E8%A1%8C%E7%AB%99%E7%82%B9%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[由于项目需要，接触到了Apache的虚拟主机配置，有时候我们需要在一台机器上对多个不同的项目进行虚拟主机配置，在此记录一下配置步骤以便往后参考 比如：我电脑上有两个项目分别为pms和adminWithTP5，我想将pms项目的虚拟主机设置为www.pms.com，adminWithTP5项目的虚拟主机设置为www.tp5.com，那么操作步骤如下： 首先说明需要对如下三个配置文件进行修改： apache\conf\httpd.conf apache\conf\extra\httpd-vhosts.conf C:\Windows\System32\drivers\etc\hosts ① 打开apache\conf\httpd.conf，Ctrl+F搜索分别找到如下两行，将最前面的#号去掉12#LoadModule vhost_alias_module modules/mod_vhost_alias.so//去掉井号，启用Apache的虚拟主机功能 12#Include conf/extra/httpd-vhosts.conf//去掉井号，系统会从conf/extra/httpd-vhosts.conf这个文件导入你即将设置的虚拟主机配置 ② 打开apache\conf\extra\httpd-vhosts.conf，在文件最后面添加如下信息（每个项目对应一个VirtualHost字段和一个Directory字段）：123456789101112131415161718192021222324&lt;VirtualHost *:80&gt; DocumentRoot "H:/XAMPP/htdocs/pms" //这里是写入你想配置虚拟主机的项目对应目录 ServerName www.pms.com //这里是写入你想设置此项目的虚拟主机名&lt;/VirtualHost&gt;&lt;Directory "H:/XAMPP/htdocs/pms"&gt; //配置映射的目录的权限，否则会出现权限错误 Options FollowSymLinks AllowOverride all Order allow,deny Allow from all&lt;/Directory&gt;//另一个项目也是同样操作，只需要改相对应的项目目录以及项目虚拟主机名&lt;VirtualHost *:80&gt; DocumentRoot "H:/XAMPP/htdocs/adminWithTP5" ServerName www.tp.com&lt;/VirtualHost&gt;&lt;Directory "H:/XAMPP/htdocs/adminWithTP5"&gt; Options FollowSymLinks AllowOverride all Order allow,deny Allow from all&lt;/Directory&gt; ③ 打开C:\Windows\System32\drivers\etc\hosts，在文件最后面添加如下信息：12127.0.0.1 www.pms.com127.0.0.1 www.tp.com 最后，重启Apache即可在浏览器中使用虚拟主机进行项目访问]]></content>
      <categories>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>ThinkPhp5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FreeCodeCamp学习笔记：Basic JavaScript之Profile Lookup]]></title>
    <url>%2F2018%2F06%2F16%2FFreeCodeCamp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9ABasic-JavaScript%E4%B9%8BProfile-Lookup%2F</url>
    <content type="text"><![CDATA[题目有一个对象数组，里面存储着通讯录。函数 lookUp 有两个预定义参数：firstName 值和 prop 属性。函数将会检查通讯录中是否存在一个与传入的 firstName 相同的联系人。如果存在，那么还需要检查对应的联系人中是否存在 prop 属性。如果它们都存在，函数返回 prop 属性对应的值。如果 firstName 值不存在，返回 &quot;No such contact&quot;。如果 prop 属性不存在，返回 &quot;No such property&quot;。其中，通讯录数组如下：1234567891011121314151617181920212223242526var contacts = [ &#123; "firstName": "Akira", "lastName": "Laine", "number": "0543236543", "likes": ["Pizza", "Coding", "Brownie Points"] &#125;, &#123; "firstName": "Harry", "lastName": "Potter", "number": "0994372684", "likes": ["Hogwarts", "Magic", "Hagrid"] &#125;, &#123; "firstName": "Sherlock", "lastName": "Holmes", "number": "0487345643", "likes": ["Intriguing Cases", "Violin"] &#125;, &#123; "firstName": "Kristian", "lastName": "Vos", "number": "unknown", "likes": ["Javascript", "Gaming", "Foxes"] &#125;]; 解答过程拿到题目首先想到的是利用for循环，遍历数组，然后判断通讯录中是否存在与函数传进来的变量 firstName 相匹配的数组，如果有，进行第二步判断，如果没有，返回 &quot;No such contact&quot;1234567891011function lookUp(firstName, prop)&#123; for(var i=0; i&lt;contacts.length; i++)&#123; if(contacts[i].firstName==firstName)&#123; //判断是否存在 //第二步判断 &#125;else&#123; return "No such contact"; &#125; &#125;&#125;lookUp("Akira", "number"); 如果有，就继续第二步判断，判断对应的联系人中是否存在 prop 属性，存在就返回对应的属性值，不存在就返回 &quot;No such property&quot;1234567891011121314151617function lookUp(firstName, prop)&#123; for(var i=0; i&lt;contacts.length; i++)&#123; if(contacts[i].firstName==firstName)&#123; if(contacts[i].hasOwnProperty(prop))&#123; //第二步判断 return contacts[i][prop]; //第一个return语句 &#125;else&#123; return "No such property"; //第二个return语句 &#125; &#125;else&#123; return "No such contact"; //第三个return语句 &#125; &#125;&#125;lookUp("Akira", "number"); 理论上来说，函数到此已经写完了，逻辑上看似没有问题，但是当提交代码以后，发现fcc并没有给我通过。在换了几组测试数据之后，发现了一个问题：只有用通讯录中的第一个数组数据进行测试时，返回的结果才是正确的。用通讯录中其他存在的数据去测试时，发现返回的都是 &quot;No such contact&quot; 。也就是说：不管你函数传进去的参数是通讯录中的第几个数据，实际上函数里面的for循环只触发了一次，也就是说无论什么情况下，通讯录的数据都无法全部被遍历，而是只遍历了第一条数据，即：contacts[0]这一条数据。 为什么for循环只执行了一次？不知大家有没有注意到我在代码中写的3条return语句。实际上，不管函数返回的是哪条return语句的内容，只要执行了return语句，循环便会退出，所以当第一次循环的时候，函数必定会执行3条return语句的其中一句，于是for循环就会退出，无法进行第二次循环。所以为了让循环进行下去，我们应该把return语句替换掉，所以我把return的三条语句的内容，用一个变量res去保存它们，然后函数的最后（for循环的外面）再去返回res。代码修改如下：1234567891011121314151617181920function lookUp(firstName, prop)&#123; var res; //定义一个变量，用来保存结果 for(var i=0; i&lt;contacts.length; i++)&#123; if(contacts[i].firstName==firstName)&#123; if(contacts[i].hasOwnProperty(prop))&#123; res = contacts[i][prop]; //之前的第一条return语句 &#125;else&#123; res = "No such property"; //之前的第二条return语句 &#125; &#125;else&#123; res = "No such contact"; //之前的第三条return语句 &#125; &#125; return res; //在for循环之外返回res&#125;lookUp("Akira", "number"); 再一次提交代码，发现fcc依旧没有让我通过。吸取了上一次的教训，再检查一下代码，发现这次刚好和上一次情况相反。上一次是无论如何for循环只执行了第一次，而这一次是无论如何for循环都执行到了最后一次，就算是中途找到了相匹配的数组数据，循环并没有结束，依然会继续下去，因此正确的返回结果会被后来的循环的结果覆盖掉。 如何解决？很简单，在第一个结果和第二个结果的下面，分别再加一条break语句，意思是假如执行到了这条结果语句，说明已经找到了正确的结果，那么break语句便会让这个循环终止，让函数返回当前的res。代码修改如下：（最终版本）1234567891011121314151617181920212223function lookUp(firstName, prop)&#123; var res; for(var i=0; i&lt;contacts.length; i++)&#123; if(contacts[i].firstName==firstName)&#123; if(contacts[i].hasOwnProperty(prop))&#123; res = contacts[i][prop]; //第一条结果赋值语句 break; &#125;else&#123; res = "No such property"; //第二条结果赋值语句 break; &#125; &#125;else&#123; res = "No such contact"; //第三条结果赋值语句 &#125; &#125; return res;&#125;lookUp("Akira", "number"); 可能有些同学会问为什么第三条结果语句后面不需要加break语句。因为，试想一下，假如加了break语句，结果是和刚才的第一种情况一样的，for循环无论如何都只能执行一次。如果没有加break语句，比如通讯录第N个数据就匹配到了你传入的参数，它一定会执行第一条结果赋值语句或者是第二条结果赋值语句，所以一定会break，跳出循环。如果到最后一次循环还是没有执行第一条结果赋值语句或者第二条结果赋值语句，那么说明传进来的参数和通讯录中的数据是不匹配的，即不存在通讯录之中，那么就理所当然的将 &quot;No such contact&quot; 赋给res，此时最后一次循环结束，返回当前的res。因此第三条结果赋值语句后不能加break语句。]]></content>
      <categories>
        <category>FreeCodeCamp</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>FreeCodeCamp</tag>
        <tag>Profile Lookup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FreeCodeCamp学习笔记：Bootstrap+Font Awesome篇]]></title>
    <url>%2F2018%2F06%2F10%2FFreeCodeCamp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9ABootstrap-Font-Awesome%E7%AF%87%2F</url>
    <content type="text"><![CDATA[Bootstrap框架引用1&lt;link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.1/css/bootstrap.min.css"/&gt; 常用class container-fluid 响应式div img-responsive 使图片自适应页面大小（宽度自适应） text-center 文本居中 text-danger 红色样式文本 text-primary 蓝色样式文本 btn以及btn-default bootstrap默认按钮样式 btn-block 使按钮成为块级元素，按钮将会伸展并填满页面整个水平空间，任何在它之下的元素都会跟着浮动至该区块的下一行 btn-primary 深蓝色按钮样式（一般用于用户主要采取的操作上） btn-info 浅蓝色按钮样式（一般用于用户可能采取的操作上） btn-danger 红色按钮样式（一般用于提醒用户慎重操作：删除、修改等） form-control 运用于表单中的文本框样式 well 为设定的列创造出一种视觉上的深度感 Bootstrap响应式网格布局响应式网格布局，可将多个元素放入一行并且指定元素的相对宽度的需求。如下图所示为bootstrap的12列网格布局：在FreeCodeCamp社区中是这么说明的：在这张图表中，class属性 col-md-* 正被使用。在这里，md表示medium（中等的），* 代表一个数字，它指定了这个元素所占的列宽。通过此图表的属性设置可知，在中等大小的屏幕上(例如笔记本电脑)，元素的列宽被指定了。有时会使用 col-xs-* ，其中xs是extra small的缩写（应用于较小的屏幕，比如手机屏幕），* 是你需要填写的数字，代表在一行中,各个元素应该占的列宽。 注意：在用 col-xs-* 类之前，必须要将这些div放入一个具有row类的div中，这样布局才能生效。即：&lt;div class=&quot;row&quot;&gt;中嵌入一个或数个&lt;div class=&quot;col-xs-*&quot;&gt; Font Awesome IconFont Awesome，一套绝佳的图标字体库和css框架。其中，这些图标都是矢量图形，而且和字体一样，可以通过px单位来指定图标的大小。引用链接：1&lt;link rel="stylesheet" href="//cdn.bootcss.com/font-awesome/4.2.0/css/font-awesome.min.css"/&gt; 使用方法：&lt;i class=&quot;fa fa-info-circle&quot;&gt;&lt;/i&gt;&nbsp;&nbsp;其中，fa类为必须，第二个类参考你所需要用到的图标，其格式为fa-xxx，xxx为对应的图标代码。 参考资料：FreeCodeCamp社区]]></content>
      <categories>
        <category>FreeCodeCamp</category>
      </categories>
      <tags>
        <tag>FreeCodeCamp</tag>
        <tag>bootstrap</tag>
        <tag>Font Awesome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小白心得：将编好的网页封装成APP]]></title>
    <url>%2F2018%2F06%2F09%2F%E5%B0%8F%E7%99%BD%E5%BF%83%E5%BE%97%EF%BC%9A%E5%B0%86%E7%BC%96%E5%A5%BD%E7%9A%84%E7%BD%91%E9%A1%B5%E5%B0%81%E8%A3%85%E6%88%90APP%2F</url>
    <content type="text"><![CDATA[本文将会说明如何将写好的HTML页面封装成APP以及如何在虚拟模拟器上打开。由于博主也是一个徘徊在APP开发门外的一名路人，这篇博客仅供小白参考（文章太过粗糙，仅仅是参考）。 要知道，目前市场上有很多APP是采用H5编写的界面，或许是因为原生开发对于前端的灵活性并不是那么符合目前市场上的需求，因此在这里介绍如何使用Apache Cordova和Ant将网页封装成Android APP。在使用Cordova之前，我们需要安装一下四项工具： NodeJS Java的JDK Android的SDK Apache Ant Step1：JDK和SDK的安装这里不再赘述，不知道的同学自行百度 Step2：安装Apache Ant：http://ant.apache.org/bindownload.cgi/进入网页后，点击zip的链接进行下载，版本选择最新的即可。 Ant不需要安装，下载解压即可。 Step3：设置用户变量JDK、SDK、Ant都准备好之后，必须在系统环境变量中指定工具路径。右键 计算机—-属性—-高级系统设置—-环境变量在系统变量区单击“新建”按钮。在“变量名”输入JAVA_HOME（变量名可自己定义），在“变量值”中输入你电脑上的JDK的存放路径。博主的路径如下：确定之后，再次点击新建，设置SDK的变量。 在“变量名”输入ANDROID_SDK（变量名可自己定义），在“变量值”中输入你电脑上的SDK的存放路径。博主的路径如下：接下来是设置Apache Ant的用户变量。三个变量新建完成之后，还要设置Path变量的变量值。在Path中的变量值输入如下4个路径，每个路径变量之间以英文分号 ; 隔开。（新变量与原来的变量直接同样要以分号隔开） %JAVA_HOME%\bin\ %ANT_HOME%\bin\ %ANDROID_SDK%\tools\ %ANDROID_SDK%\platform-tools\ Step4：三个必要工具安装完成以后，打开命令提示符窗口（cmd），检查工具是否安装成功。测试命令分别是： java -version ant -version adb version &nbsp;(此处没有间隔符-) 如果三个工具安装成功，会分别显示版本信息，如果某一项没有安装成功，命令行会显示“不是内部或外部命令，也不是可运行的程序或批处理文件”。如果是找不到命令，大多数是因为你的变量设置路径的时候不正确。查看一下是否路径写错或者遗漏。 Step5：通过npm安装Cordova在此之前我们还要先安装NodeJS，下载地址：http://nodejs.org/ 打开官网之后单击install，下载并安装NodeJS。安装完成之后，就可以使用npm命令去安装Cordova。打开CMD窗口（避免安装出现错误，建议以管理员身份打开CMD，右键cmd—-以管理员身份运行）。输入下列语法安装Cordova1npm install -g cordova NodeJS安装完成时会自动增加环境变量，如果上述命令无法执行，检查一下你的Path变量中有没有自动添加进去。 Step6：Cordova安装完成之后，打开AVD Manager新建安卓模拟器AVD Manger应用程序一般在SDK目录下可以找到，找不到的同学（比如博主的SDK目录就是没有AVD Manager），可以从AndroidStudio里面直接点击打开。如下图红圈所示：打开之后新建模拟器，新建完成之后可以点击右边的启动按钮即可启动模拟器了。但是我们现在还不需要启动，因为我们接下来要将自己写的网页包装成apk Step7：将网页转换成Android AppAndroid的软件安装文件必须是apk文件，只要将apk文件导入模拟器，就可在模拟器上安装你的app。那么我们先要得到apk文件。（1）创建项目。打开cmd，输入命令1cordova create hello com.example.hello HelloWorld 输入这个创建命令之前，需要进入某个盘符如D盘，再输入上面的命令，那么将会在D盘自动生成一个HelloWorld项目。create后面的三个参数，分别对应的是文件夹名称（hello）、App id（com.example.hello） 、app名称（HelloWorld）。创建完以后，打开D盘的hello文件夹，会有如下几个子目录，其中www就是放置你自己网页的文件夹。如图：（2）添加Android平台（首先在cmd进入项目文件夹，即hello文件夹）进入之后输入如下命令：1cordova platform add android （3）创建APP，生成apk文件。（还是在项目文件夹输入如下命令）：1cordova run android 命令执行之后，我们可以在如下路径找到你自己的app安装包，即apk文件：D:\hello\platforms\android\app\build\outputs\apk\debug（4）将你的apk导入至模拟器并安装，参考地址：百度首先打开安卓模拟器（必须要先打开），cmd命令行进入sdk文件夹的platform-tools文件夹下（目的是要找到此目录下的adb.exe），然后执行安装apk文件的命令：1adb install apk文件路径和地址 比如博主刚才的apk文件位置是在D:\hello\platforms\android\app\build\outputs\apk\debug那么安装命令就是：1adb install D:\hello\platforms\android\app\build\outputs\apk\debug\app-debug.apk 命令最后面是你的apk文件（如下图所示，项目文件夹名字有变化，是另外一个项目）出现success即为成功，在你的模拟器上便出现了一个新的app]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>App</tag>
        <tag>Ant</tag>
        <tag>Cordova</tag>
      </tags>
  </entry>
</search>
